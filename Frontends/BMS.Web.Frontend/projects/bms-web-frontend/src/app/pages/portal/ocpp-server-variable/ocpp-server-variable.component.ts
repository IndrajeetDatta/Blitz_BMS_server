import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { BMSWebApiClientModule } from 'projects/bms-web-api-client/src/public-api';

@Component({
  selector: 'app-ocpp-server-variable',
  templateUrl: './ocpp-server-variable.component.html',
  styleUrls: ['./ocpp-server-variable.component.scss'],
})
export class OcppServerVariableComponent implements OnInit {
  constructor(private router: Router) {}
  chargeController = { id: 249 };

  exampleData = {
    AllowOfflineTxForUnknownId: {
      agent_used: true,
      key: 'AllowOfflineTxForUnknownId',
      predefined: true,
      readonly: true,
      required: false,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    AllowTimeSyncDuringSession: {
      agent_used: true,
      key: 'AllowTimeSyncDuringSession',
      predefined: false,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: true,
    },
    AuthorizationCacheEnabled: {
      agent_used: true,
      key: 'AuthorizationCacheEnabled',
      predefined: true,
      readonly: true,
      required: false,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    AuthorizeRemoteTxRequests: {
      agent_used: true,
      key: 'AuthorizeRemoteTxRequests',
      predefined: true,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: true,
    },
    AvailabilityOnlyWhenTimeSynchronized: {
      agent_used: true,
      key: 'AvailabilityOnlyWhenTimeSynchronized',
      predefined: false,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: true,
    },
    BlinkRepeat: {
      agent_used: true,
      key: 'BlinkRepeat',
      predefined: true,
      readonly: false,
      required: false,
      type: 'integer',
      unit: 'times',
      value: 0,
    },
    ChargeProfileMaxStackLevel: {
      agent_used: true,
      key: 'ChargeProfileMaxStackLevel',
      predefined: true,
      readonly: true,
      required: true,
      type: 'integer',
      unit: '',
      value: 0,
    },
    ChargingScheduleAllowedChargingRateUnit: {
      agent_used: true,
      key: 'ChargingScheduleAllowedChargingRateUnit',
      predefined: true,
      readonly: true,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value: 'Current',
    },
    ChargingScheduleMaxPeriods: {
      agent_used: true,
      key: 'ChargingScheduleMaxPeriods',
      predefined: true,
      readonly: true,
      required: true,
      type: 'integer',
      unit: '',
      value: 96,
    },
    ClockAlignedDataInterval: {
      agent_used: true,
      key: 'ClockAlignedDataInterval',
      predefined: true,
      readonly: true,
      required: true,
      type: 'integer',
      unit: 's',
      value: 0,
    },
    ConnectionTimeOut: {
      agent_used: true,
      key: 'ConnectionTimeOut',
      predefined: true,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 30,
    },
    ConnectorPhaseRotation: {
      agent_used: true,
      key: 'ConnectorPhaseRotation',
      predefined: true,
      readonly: true,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value: ['0.RST'],
    },
    ConnectorPhaseRotationMaxLength: {
      agent_used: true,
      key: 'ConnectorPhaseRotationMaxLength',
      predefined: true,
      readonly: true,
      required: false,
      type: 'integer',
      unit: '',
      value: 1,
    },
    ConnectorSwitch3to1PhaseSupported: {
      agent_used: true,
      key: 'ConnectorSwitch3to1PhaseSupported',
      predefined: true,
      readonly: true,
      required: false,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    EVDiscardTimeOut: {
      agent_used: true,
      key: 'EVDiscardTimeOut',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 120,
    },
    EichrechtAdminList: {
      agent_used: true,
      key: 'EichrechtAdminList',
      predefined: false,
      readonly: false,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value: '',
    },
    ForceUpdate: {
      agent_used: true,
      key: 'ForceUpdate',
      predefined: false,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    GetConfigurationMaxKeys: {
      agent_used: true,
      key: 'GetConfigurationMaxKeys',
      predefined: true,
      readonly: true,
      required: true,
      type: 'integer',
      unit: '',
      value: 100,
    },
    GlobalMaxCurrent: {
      agent_used: true,
      key: 'GlobalMaxCurrent',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 'A',
      value: 16,
    },
    HeartbeatInterval: {
      agent_used: true,
      key: 'HeartbeatInterval',
      predefined: true,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 300,
    },
    LightIntensity: {
      agent_used: true,
      key: 'LightIntensity',
      predefined: true,
      readonly: false,
      required: false,
      type: 'integer',
      unit: '%',
      value: 100,
    },
    LocalAuthListEnabled: {
      agent_used: true,
      key: 'LocalAuthListEnabled',
      predefined: true,
      readonly: true,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    LocalAuthorizeOffline: {
      agent_used: true,
      key: 'LocalAuthorizeOffline',
      predefined: true,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    LocalPreAuthorize: {
      agent_used: true,
      key: 'LocalPreAuthorize',
      predefined: true,
      readonly: true,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    LogLevel: {
      agent_used: true,
      key: 'LogLevel',
      predefined: false,
      readonly: false,
      required: true,
      type: 'string',
      unit: '',
      value: 'DEBUG',
    },
    MaxChargingProfilesInstalled: {
      agent_used: true,
      key: 'MaxChargingProfilesInstalled',
      predefined: true,
      readonly: true,
      required: true,
      type: 'integer',
      unit: '',
      value: 1,
    },
    MaxCurrent: {
      agent_used: true,
      key: 'MaxCurrent',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 'A',
      value: 16,
    },
    MaxEnergyOnInvalidId: {
      agent_used: true,
      key: 'MaxEnergyOnInvalidId',
      predefined: true,
      readonly: true,
      required: false,
      type: 'integer',
      unit: 'Wh',
      value: false,
    },
    MaxTimeDiffWithoutSynchronize: {
      agent_used: true,
      key: 'MaxTimeDiffWithoutSynchronize',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 60,
    },
    MessageAtKeyTransfer: {
      agent_used: true,
      key: 'MessageAtKeyTransfer',
      predefined: false,
      readonly: false,
      required: true,
      type: 'string',
      unit: 'string',
      value: 'setMeterConfiguration',
    },
    MeterValueSampleInterval: {
      agent_used: true,
      key: 'MeterValueSampleInterval',
      predefined: true,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 900,
    },
    MeterValuesAlignedData: {
      agent_used: true,
      key: 'MeterValuesAlignedData',
      predefined: true,
      readonly: true,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value: '',
    },
    MeterValuesAlignedDataMaxLength: {
      agent_used: true,
      key: 'MeterValuesAlignedDataMaxLength',
      predefined: true,
      readonly: true,
      required: false,
      type: 'integer',
      unit: '',
      value: 10,
    },
    MeterValuesSampledData: {
      agent_used: true,
      key: 'MeterValuesSampledData',
      predefined: true,
      readonly: false,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value:
        'Voltage, Current.Import, Energy.Active.Import.Register, Power.Active.Import',
    },
    MeterValuesSampledDataMaxLength: {
      agent_used: true,
      key: 'MeterValuesSampledDataMaxLength',
      predefined: true,
      readonly: true,
      required: false,
      type: 'integer',
      unit: '',
      value: 10,
    },
    MinimumStatusDuration: {
      agent_used: true,
      key: 'MinimumStatusDuration',
      predefined: true,
      readonly: false,
      required: false,
      type: 'integer',
      unit: 's',
      value: 1,
    },
    NewBackendURL: {
      agent_used: true,
      key: 'NewBackendURL',
      predefined: false,
      readonly: false,
      required: true,
      type: 'string',
      unit: '',
      value: '',
    },
    NumberOfConnectors: {
      agent_used: true,
      key: 'NumberOfConnectors',
      predefined: true,
      readonly: true,
      required: true,
      type: 'integer',
      unit: '',
      value: 0,
    },
    PreUnavailabilityForUpdate: {
      agent_used: true,
      key: 'PreUnavailabilityForUpdate',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 30,
    },
    PresentingRFIDEndCharging: {
      agent_used: true,
      key: 'PresentingRFIDEndCharging',
      predefined: false,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: true,
    },
    RFIDByteOrder: {
      agent_used: true,
      key: 'RFIDByteOrder',
      predefined: false,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    RFIDCharacterOrder: {
      agent_used: true,
      key: 'RFIDCharacterOrder',
      predefined: false,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    ReserveConnectorZeroSupported: {
      agent_used: true,
      key: 'ReserveConnectorZeroSupported',
      predefined: true,
      readonly: true,
      required: false,
      type: 'boolean',
      unit: 'ON/OFF',
      value: false,
    },
    ResetRetries: {
      agent_used: true,
      key: 'ResetRetries',
      predefined: true,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 'times',
      value: 3,
    },
    SendLocalListMaxLength: {
      agent_used: true,
      key: 'SendLocalListMaxLength',
      predefined: true,
      readonly: true,
      required: true,
      type: 'integer',
      unit: '',
      value: 50000,
    },
    SignedDataFormat: {
      agent_used: true,
      key: 'SignedDataFormat',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 'format',
      value: 0,
    },
    StopTransactionOnEVSideDisconnect: {
      agent_used: true,
      key: 'StopTransactionOnEVSideDisconnect',
      predefined: true,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: true,
    },
    StopTransactionOnInvalidId: {
      agent_used: true,
      key: 'StopTransactionOnInvalidId',
      predefined: true,
      readonly: true,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: true,
    },
    StopTxnAlignedData: {
      agent_used: true,
      key: 'StopTxnAlignedData',
      predefined: true,
      readonly: true,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value: ' ',
    },
    StopTxnSampledData: {
      agent_used: true,
      key: 'StopTxnSampledData',
      predefined: true,
      readonly: true,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value: '',
    },
    SupportedFeatureProfiles: {
      agent_used: true,
      key: 'SupportedFeatureProfiles',
      predefined: true,
      readonly: true,
      required: true,
      type: 'CSL',
      unit: 'CSL',
      value:
        'Core, FirmwareManagement, LocalAuthListManagement, Reservation, SmartCharging, RemoteTrigger',
    },
    SupportedFeatureProfilesMaxLength: {
      agent_used: true,
      key: 'SupportedFeatureProfilesMaxLength',
      predefined: true,
      readonly: true,
      required: false,
      type: 'integer',
      unit: '',
      value: 6,
    },
    TimeInSyncAfterConnectionLoss: {
      agent_used: true,
      key: 'TimeInSyncAfterConnectionLoss',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 86400,
    },
    TimeoutSignedData: {
      agent_used: true,
      key: 'TimeoutSignedData',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 30,
    },
    TransactionMessageAttempts: {
      agent_used: true,
      key: 'TransactionMessageAttempts',
      predefined: true,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 'times',
      value: 3,
    },
    TransactionMessageRetryInterval: {
      agent_used: true,
      key: 'TransactionMessageRetryInterval',
      predefined: true,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 10,
    },
    UnlockConnectorOnEVSideDisconnect: {
      agent_used: true,
      key: 'UnlockConnectorOnEVSideDisconnect',
      predefined: true,
      readonly: false,
      required: true,
      type: 'boolean',
      unit: 'ON/OFF',
      value: true,
    },
    VendorAtKeyTransfer: {
      agent_used: true,
      key: 'VendorAtKeyTransfer',
      predefined: false,
      readonly: false,
      required: true,
      type: 'string',
      unit: 'string',
      value: 'generalConfiguration',
    },
    WebSocketPingInterval: {
      agent_used: true,
      key: 'WebSocketPingInterval',
      predefined: true,
      readonly: false,
      required: false,
      type: 'integer',
      unit: 's',
      value: 0,
    },
    WebSocketPingTimeout: {
      agent_used: true,
      key: 'WebSocketPingTimeout',
      predefined: false,
      readonly: false,
      required: true,
      type: 'integer',
      unit: 's',
      value: 30,
    },
  };
  ngOnInit(): void {}

  getOCCP(id?: number) {
    this.router.navigate(['portal/charge-station/ocpp'], {
      queryParams: { id },
    });
  }
}
