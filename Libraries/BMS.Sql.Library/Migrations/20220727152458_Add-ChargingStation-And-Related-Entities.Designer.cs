// <auto-generated />
using System;
using BMS.Sql.Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BMS.Sql.Library.Migrations
{
    [DbContext(typeof(BMSDbContext))]
    [Migration("20220727152458_Add-ChargingStation-And-Related-Entities")]
    partial class AddChargingStationAndRelatedEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BMS.Sql.Library.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Configured")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateInstalled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ETH0DHCP")
                        .HasColumnType("boolean");

                    b.Property<string>("ETH0Gateway")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ETH0IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ETH0SubnetMask")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Heartbeat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstallerId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LoadManagement")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemAPN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemConnectionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModemDefaultRoute")
                        .HasColumnType("boolean");

                    b.Property<string>("ModemExtendedReport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemICCID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemIMSI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemIPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModemPreferOverETH0")
                        .HasColumnType("boolean");

                    b.Property<string>("ModemPrimaryDNSServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemRadioTechnology")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ModemReceivedBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ModemRegistrationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemRoamingStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemSecondaryDNSServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModemServiceActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ModemSignalCQI")
                        .HasColumnType("integer");

                    b.Property<string>("ModemSignalQuality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModemSignalRSSI")
                        .HasColumnType("integer");

                    b.Property<string>("ModemSimPin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemSimStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ModemTransmittedBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ModemUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NetworkConnection")
                        .HasColumnType("boolean");

                    b.Property<string>("NetworkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OCPPConnection")
                        .HasColumnType("boolean");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SimActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SystemTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Uptime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InstallerId");

                    b.ToTable("ChargingStations");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Installer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Installers");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<string>("IPV4Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPV6Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MACAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ReceivedBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("TransmittedBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargingStation", b =>
                {
                    b.HasOne("BMS.Sql.Library.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMS.Sql.Library.Models.Installer", "Installer")
                        .WithMany()
                        .HasForeignKey("InstallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Installer");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Network", b =>
                {
                    b.HasOne("BMS.Sql.Library.Models.ChargingStation", "ChargingStation")
                        .WithMany("Networks")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargingStation", b =>
                {
                    b.Navigation("Networks");
                });
#pragma warning restore 612, 618
        }
    }
}
