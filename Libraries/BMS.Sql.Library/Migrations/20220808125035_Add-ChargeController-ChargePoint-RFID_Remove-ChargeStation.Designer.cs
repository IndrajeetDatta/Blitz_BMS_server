// <auto-generated />
using System;
using BMS.Sql.Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BMS.Sql.Library.Migrations
{
    [DbContext(typeof(BMSDbContext))]
    [Migration("20220808125035_Add-ChargeController-ChargePoint-RFID_Remove-ChargeStation")]
    partial class AddChargeControllerChargePointRFID_RemoveChargeStation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BMS.Sql.Library.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargeController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CPUTemperatureCelsius")
                        .HasColumnType("integer");

                    b.Property<int>("CPUUtilizationPercentage")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ControllerAgentVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ControllerAgent_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataTotalBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("DataUtilizationPercentage")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateInstalled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ETH0DHCP")
                        .HasColumnType("boolean");

                    b.Property<string>("ETH0Gateway")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ETH0IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ETH0SubnetMask")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InstallerId")
                        .HasColumnType("integer");

                    b.Property<string>("JupicoreStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JupicoreVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LoadManagement")
                        .HasColumnType("boolean");

                    b.Property<bool>("LoadManagementActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LoadManagementStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoadManagementVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LogTotalBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("LogUtilizationPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("ModbusClientStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModbusClientVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModbusServerStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModbusServerVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemAPN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemConnectionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModemDefaultRoute")
                        .HasColumnType("boolean");

                    b.Property<string>("ModemExtendedReport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemICCID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemIMSI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemIPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModemPreferOverETH0")
                        .HasColumnType("boolean");

                    b.Property<string>("ModemPrimaryDNSServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemRadioTechnology")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ModemReceivedBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ModemRegistrationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemRoamingStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemSecondaryDNSServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ModemServiceActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ModemSignalCQI")
                        .HasColumnType("integer");

                    b.Property<string>("ModemSignalQuality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModemSignalRSSI")
                        .HasColumnType("integer");

                    b.Property<string>("ModemSimPin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModemSimStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ModemTransmittedBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ModemUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NetworkConnection")
                        .HasColumnType("boolean");

                    b.Property<string>("NetworkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OCPP16Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OCPP16_Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OCPPConnection")
                        .HasColumnType("boolean");

                    b.Property<long>("RAMAvailableBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("RAMTotalBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("RAMUsedBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SimActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SystemMonitorStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemMonitorVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SystemTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UptimeInSeconds")
                        .HasColumnType("bigint");

                    b.Property<long>("VarVolatileTotalBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("VarVolatileUtilizationPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("WebserverStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebserverVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InstallerId");

                    b.ToTable("ChargeControllers");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargeControllerId")
                        .HasColumnType("integer");

                    b.Property<int>("ChargeCurrentMaximumInAmpers")
                        .HasColumnType("integer");

                    b.Property<int>("ChargeCurrentMinimumInAmpers")
                        .HasColumnType("integer");

                    b.Property<string>("ChargingMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ChargingRate")
                        .HasColumnType("numeric");

                    b.Property<int>("ChargingTimeInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Configured")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("EnergyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FallbackCurrentInAmpers")
                        .HasColumnType("integer");

                    b.Property<int>("FallbackTimeInSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Heartbeat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HighLevelCommunication")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OCPPConnectorId")
                        .HasColumnType("integer");

                    b.Property<string>("PhaseRotation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RFIDReader")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RFIDReaderType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RFIDTimeoutInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChargeControllerId");

                    b.ToTable("ChargePoints");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Installer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Installers");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<string>("IPV4Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPV6Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MACAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ReceivedBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("TransmittedBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.RFID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowCharging")
                        .HasColumnType("boolean");

                    b.Property<int>("ChargeControllerId")
                        .HasColumnType("integer");

                    b.Property<int>("EvConsumptionRateKWhPer100KM")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChargeControllerId");

                    b.ToTable("RFID");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargeController", b =>
                {
                    b.HasOne("BMS.Sql.Library.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMS.Sql.Library.Models.Installer", "Installer")
                        .WithMany()
                        .HasForeignKey("InstallerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Installer");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargePoint", b =>
                {
                    b.HasOne("BMS.Sql.Library.Models.ChargeController", "ChargeController")
                        .WithMany("ChargePoints")
                        .HasForeignKey("ChargeControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargeController");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.Network", b =>
                {
                    b.HasOne("BMS.Sql.Library.Models.ChargeController", "ChargingStation")
                        .WithMany("Networks")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.RFID", b =>
                {
                    b.HasOne("BMS.Sql.Library.Models.ChargeController", "ChargeController")
                        .WithMany("WhitelistRFIDs")
                        .HasForeignKey("ChargeControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargeController");
                });

            modelBuilder.Entity("BMS.Sql.Library.Models.ChargeController", b =>
                {
                    b.Navigation("ChargePoints");

                    b.Navigation("Networks");

                    b.Navigation("WhitelistRFIDs");
                });
#pragma warning restore 612, 618
        }
    }
}
